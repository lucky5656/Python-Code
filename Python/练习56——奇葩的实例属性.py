class A():
    b = 1  #b属性被称为类属性

#情形1      #obj1是没有属性b的，于是Python到类A中去查找，成功找到并显示出来
            #A的属性b是共享给其所有实例的
obj1 = A()  #A属于类对象，obj1属于实例对象
obj2 = A()
print(obj1.b,obj2.b,A.b)#A.b属于类属性形式，obj1.b属于实例属性

#在情形1时,实例对象obj1和obj2不存在属性b，此时，obj1.b、obj2.b、A.b实质上都是指A.b



#情形2
obj1.b += 2  #包含了属性获取及属性设置两个操作 #当发生属性设置的时候，obj1这个实例对象没有属性b，因此会为自身动态添加一个属性b
             #由于从对象的角度，类对象和实例对象属于两个独立的对象，所以这个b属性只属于obj1，也就是说，这时候类对象A和实例对象obj1各自有一个属性b
print(obj1.b,obj2.b,A.b)

#在情形2时,对实例对象obj1设置了属性b，并赋值为3，此时，obj2.b、A.b实质上都是指A.b


#情形3
A.b += 3
print(obj1.b,obj2.b,A.b)  #在情形3时，再次调用obj1.b时，按照属性调用查找规则，这个时候获取到的是实例对象obj1的属性b，而不是类对象A的属性b

#在情形3时,再次调用obj1.b时，将获取到的是实例对象obj1的属性b，而不是类对象A的属性b。而对于实例对象obj2，由于其并没有属性b，所以调用obj2.b时，获取到的仍是A的属性b


#如果实例对象没有调用类属性的话，会使用类对象的属性值。
#如果实例对象调用类属性的话，会创建一个类对象属性一样的副本给自己，再次调用实例对象的类属性时，这个类属性其实已经不是类对象的类属性，而是类属性的副本了，它只属于实例对象。
